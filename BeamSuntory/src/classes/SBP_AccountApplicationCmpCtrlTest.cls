@isTest
private class SBP_AccountApplicationCmpCtrlTest {
	@testSetup static void setup() {
		Profile p = [SELECT Id FROM Profile WHERE Name = 'System Administrator'];
		User u = new User(Alias = 'beamtu', Email = 'standarduser@testorg.com', Regional_Diplomat_Regions__c = 'Illinois',
		                  EmailEncodingKey = 'UTF-8', LastName = 'Testing', LanguageLocaleKey = 'en_US',
		                  LocaleSidKey = 'en_US', ProfileId = p.Id,
		                  TimeZoneSidKey = 'America/Chicago', UserName = 'beamsuntorytestuser@test-user-system.com.test-only');
		insert u;

		// create application question set
		Application_Question_Set__c makersMarkQuestionSet = new Application_Question_Set__c();
		makersMarkQuestionSet.Brand__c = 'Makers Mark';
		makersMarkQuestionSet.Name = 'Maker\'s Mark Domestic';
		insert makersMarkQuestionSet;

		Application_Question_Set__c elTesoroQuestionSet = new Application_Question_Set__c();
		elTesoroQuestionSet.Brand__c = 'El Tesoro';
		elTesoroQuestionSet.Name = 'El Tesoro';
		insert elTesoroQuestionSet;

		// create application questions
		Application_Question__c q1 = new Application_Question__c(Question__c = 'Is the account a P/G/S account overall?', Type__c = 'Radio', Application_Question_Set__c = makersMarkQuestionSet.Id);
		Application_Question__c q2 = new Application_Question__c(Question__c = 'Is the account a P/G/S account overall?', Type__c = 'Radio', Application_Question_Set__c = elTesoroQuestionSet.Id);

		Application_Question__c q3 = new Application_Question__c(Question__c = 'Is the account EDGE?', Type__c = 'Radio', Application_Question_Set__c = makersMarkQuestionSet.Id);
		Application_Question__c q4 = new Application_Question__c(Question__c = 'Is the account EDGE?', Type__c = 'Radio', Application_Question_Set__c = elTesoroQuestionSet.Id);

		Application_Question__c q5 = new Application_Question__c(Question__c = 'Is the account a premium or luxury account?', Type__c = 'Radio', Application_Question_Set__c = makersMarkQuestionSet.Id);
		Application_Question__c q6 = new Application_Question__c(Question__c = 'Is the account a premium or luxury account?', Type__c = 'Radio', Application_Question_Set__c = elTesoroQuestionSet.Id);

		insert new List<Application_Question__c> {q1, q2, q3, q4, q5, q6};
		// create answers for each question
		Application_Answer__c q1a1 = new Application_Answer__c(Answer__c = 'Yes', Application_Question__c = q1.Id);
		Application_Answer__c q1a2 = new Application_Answer__c(Answer__c = 'No', Application_Question__c = q1.Id);

		Application_Answer__c q2a1 = new Application_Answer__c(Answer__c = 'Yes', Application_Question__c = q2.Id);
		Application_Answer__c q2a2 = new Application_Answer__c(Answer__c = 'No', Application_Question__c = q2.Id);

		Application_Answer__c q3a1 = new Application_Answer__c(Answer__c = 'Yes', Application_Question__c = q3.Id);
		Application_Answer__c q3a2 = new Application_Answer__c(Answer__c = 'No', Application_Question__c = q3.Id);

		Application_Answer__c q4a1 = new Application_Answer__c(Answer__c = 'Yes', Application_Question__c = q4.Id);
		Application_Answer__c q4a2 = new Application_Answer__c(Answer__c = 'No', Application_Question__c = q4.Id);

		Application_Answer__c q5a1 = new Application_Answer__c(Answer__c = 'Yes', Application_Question__c = q5.Id);
		Application_Answer__c q5a2 = new Application_Answer__c(Answer__c = 'No', Application_Question__c = q5.Id);

		Application_Answer__c q6a1 = new Application_Answer__c(Answer__c = 'Yes', Application_Question__c = q6.Id);
		Application_Answer__c q6a2 = new Application_Answer__c(Answer__c = 'No', Application_Question__c = q6.Id);
		insert new List<Application_Answer__c> {q1a1, q1a2, q2a1, q2a2, q3a1, q3a2, q4a1, q4a2, q5a1, q5a2, q6a1, q6a2 };


		Account testAccount = new Account();
		testAccount.Name = 'Test Account';
		testAccount.BillingState = 'IL';
		testAccount.RecordTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('OffPremise').getRecordTypeId();

		Account retailAccount = new Account();
		retailAccount.Name = 'Retail Account';
		retailAccount.BillingState = 'IL';
		retailAccount.RecordTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('OffPremise').getRecordTypeId();

		Account intAccount = new Account();
		intAccount.Name = 'Single Barrel International Account';
		intAccount.BillingState = 'IL';
		intAccount.RecordTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('OffPremise').getRecordTypeId();

		insert new List<Account> {testAccount, retailAccount, intAccount};

		Account_Application__c makersApplication = new Account_Application__c();
		makersApplication.Brand__c = 'Makers Mark';
		makersApplication.Status__c = 'Approved';
		makersApplication.Application_Question_Set__c = makersMarkQuestionSet.Id;
		makersApplication.Account__c = testAccount.Id;
		makersApplication.Submitter__c = UserInfo.getUserId();
		insert makersApplication;

		Application_Response__c r1q1 = new Application_Response__c(Account_Application__c = makersApplication.Id, Answer_Text__c = 'Yes', Application_Question__c = q1.Id);
		insert r1q1;

	}

	public static Application_Question_Set__c getApplicationQuestionSet(String questionSetName) {
		return [select id from Application_Question_Set__c where Name = :questionSetName limit 1];
	}

	public static Account_Application__c getAccountApplicationByBrand(String brand) {
		return [select id, Status__c from Account_Application__c where Brand__c = :brand limit 1];
	}

	public static List<Account_Application__c> getAllAccountApplicationByBrand(String brand) {
		return [select id, Status__c from Account_Application__c where Brand__c = :brand];
	}

	public static Account getTestAccount() {
		return [select id from Account where Name = 'Test Account'];
	}

	public static Account getAccountByName(String name) {
		return [select id from Account where Name = :name];
	}

	public static List<Application_Question__c> getQuestionsByBrand(String brand) {
		return [select id from Application_Question__c where Application_Question_Set__r.Brand__c = :brand];
	}

	public static testMethod void getAccountApplicationDataTest() {

		Test.startTest();
		Application_Question_Set__c elTesoroQuestionSet = getApplicationQuestionSet('El Tesoro');

		LightningComponentUtility.RequestStatus response = SBP_AccountApplicationCmpCtrl.getAccountApplicationData('El Tesoro', false);

		System.assertEquals(elTesoroQuestionSet.Id, response.responseMap.get('questionSetId'), 'Question Sets should be equal');
		System.assertNotEquals(NULL, response.responseMap.get('appQuestions'), 'Questions should be returned');
		System.assertEquals(true, response.success, 'Operation should return successfully');

		Test.stopTest();
	}

	public static testMethod void accountApplicationStatusApprovedTest() {

		Test.startTest();
		Account_Application__c makersApplication = getAccountApplicationByBrand('Makers Mark');
		Account testAccount = getTestAccount();

		LightningComponentUtility.RequestStatus response = SBP_AccountApplicationCmpCtrl.getAccountStatus(testAccount.Id, 'Makers Mark');

		System.assertEquals(true, response.responseMap.get('accountApproved'), 'Application should be approved');
		System.assertEquals(true, response.success, 'Operation should return successfully');

		Test.stopTest();
	}

	public static testMethod void accountApplicationStatusApprovedErrorTest() {

		Test.startTest();
		Account_Application__c makersApplication = getAccountApplicationByBrand('Makers Mark');
		Account testAccount = getTestAccount();

		LightningComponentUtility.RequestStatus response = SBP_AccountApplicationCmpCtrl.getAccountStatus(makersApplication.Id, 'Makers Mark');

		System.assertEquals(false, response.success, 'Operation should not return successfully');

		Test.stopTest();
	}

	public static testMethod void accountApplicationStatusPendingApprovalTest() {

		Test.startTest();
		Account_Application__c makersApplication = getAccountApplicationByBrand('Makers Mark');
		makersApplication.Status__c = 'Pending Approval';
		update makersApplication;

		Account testAccount = getTestAccount();

		LightningComponentUtility.RequestStatus response = SBP_AccountApplicationCmpCtrl.getAccountStatus(testAccount.Id, 'Makers Mark');

		System.assertEquals(true, response.responseMap.get('accountPendingApproval'), 'Application should be in pending approval status');
		System.assertEquals(true, response.success, 'Operation should return successfully');

		Test.stopTest();
	}

	public static testMethod void createApplicationTest() {
		List<Application_Question__c> questions = getQuestionsByBrand('Makers Mark');
		Application_Question_Set__c makersMarkQuestionSet = getApplicationQuestionSet('Maker\'s Mark Domestic');
		List<Account_Application__c> applications = getAllAccountApplicationByBrand('Makers Mark');
		Account retailAccount = getAccountByName('Retail Account');

		String questionResponse = '[{'
		                          + '    "Application_Question__c": "' + questions[0].Id + '",'
		                          + '    "Answer_Text__c": "No"'
		                          + '}, {'
		                          + '    "Application_Question__c": "' + questions[1].Id + '",'
		                          + '    "Answer_Text__c": "Yes"'
		                          + '}, {'
		                          + '    "Application_Question__c": "' + questions[2].Id + '",'
		                          + '    "Answer_Text__c": "No"'
		                          + '}]';

		String jsonApplications = '[{"Premise_Type__c":"On Premise"'
		                          + ',"Account__c":"' + retailAccount.Id + '"'
		                          + ',"City__c":""'
		                          + ',"Country__c":""'
		                          + ',"Brand__c":"Makers Mark"'
		                          + ',"Application_Question_Set__c":"' + makersMarkQuestionSet.Id + '"'
		                          + ',"Account_Name__c":""}]';

		Test.startTest();

		Account testAccount = getTestAccount();

		System.assertEquals(1, applications.size(), 'One application should exist');
		LightningComponentUtility.RequestStatus response = SBP_AccountApplicationCmpCtrl.insertAccountApplication(questionResponse, jsonApplications);

		List<Account_Application__c> applicationsAfter = getAllAccountApplicationByBrand('Makers Mark');
		System.assertEquals(2, applicationsAfter.size(), 'Two applications should exist');
		System.assertEquals(true, response.success, 'Operation should return successfully');

		Test.stopTest();
	}

	public static testMethod void usePreviousApplicationResponsesTest() {
		List<Account_Application__c> applications = getAllAccountApplicationByBrand('Makers Mark');

		Test.startTest();

		Account testAccount = getTestAccount();

		System.assertEquals(1, applications.size(), 'One application should exist');
		LightningComponentUtility.RequestStatus response = SBP_AccountApplicationCmpCtrl.sendRequestWithPreviousAnswers(testAccount.Id, 'Makers Mark');

		List<Account_Application__c> applicationsAfter = getAllAccountApplicationByBrand('Makers Mark');
		System.assertEquals(2, applicationsAfter.size(), 'Two applications should exist');
		System.assertEquals(true, response.success, 'Operation should return successfully');

		Test.stopTest();
	}

	public static testMethod void usePreviousApplicationResponsesErrorTest() {
		List<Account_Application__c> applications = getAllAccountApplicationByBrand('Makers Mark');

		Test.startTest();

		LightningComponentUtility.RequestStatus response = SBP_AccountApplicationCmpCtrl.sendRequestWithPreviousAnswers(applications[0].Id, 'Makers Mark');

		System.assertEquals(false, response.success, 'Operation should not return successfully');

		Test.stopTest();
	}

	public static testMethod void elTesoroProgramUnavailableTest() {
		Time_Interval__c elTesoroTimeInterval = new Time_Interval__c();
		elTesoroTimeInterval.Brand__c = 'El Tesoro';
		elTesoroTimeInterval.Type__c = 'Season Program Length';
		elTesoroTimeInterval.Start_Date__c = Date.today();
		elTesoroTimeInterval.End_Date__c = Date.today().addDays(10);
		elTesoroTimeInterval.isActive__c = false;
		insert elTesoroTimeInterval;

		Test.startTest();

		LightningComponentUtility.RequestStatus response = SBP_AccountApplicationCmpCtrl.isProgramAvailable('El Tesoro');

		System.assertEquals(false, response.responseMap.get('isActiveProgram'), 'Program should be unavailable');
		System.assertEquals(true, response.success, 'Operation should return successfully');

		Test.stopTest();
	}

	public static testMethod void elTesoroProgramAvailableTest() {
		Time_Interval__c elTesoroTimeInterval = new Time_Interval__c();
		elTesoroTimeInterval.Brand__c = 'El Tesoro';
		elTesoroTimeInterval.Type__c = 'Season Program Length';
		elTesoroTimeInterval.Start_Date__c = Date.today().addDays(40);
		elTesoroTimeInterval.End_Date__c = Date.today().addDays(50);
		elTesoroTimeInterval.Application_Deadline__c = Date.today().addDays(1);
		elTesoroTimeInterval.isActive__c = true;
		insert elTesoroTimeInterval;

		Test.startTest();

		LightningComponentUtility.RequestStatus response = SBP_AccountApplicationCmpCtrl.isProgramAvailable('El Tesoro');

		System.assertEquals(true, response.responseMap.get('isActiveProgram'), 'Program should be available' + response.message);
		System.assertEquals(true, response.success, 'Operation should return successfully');

		Test.stopTest();
	}



}